Exercițiu - Obținerea detaliilor numărului
Prezentare generală
Implementează o clasă, numită LazyNumberDetails, a căror obiecte stochează fiecare un număr natural și
 oferă utilizatorului (obiectului respectiv) următoarele detalii despre numărul stocat:
1.	Este un număr prim?
2.	Este un număr perfect?
3.	Este un număr magic?
Toate cele 3 operații implementate de clasă sunt considerate a fi operații intens computaționale.
 Prin urmare, acestea trebuie efectuate de un număr cât mai mic de ori,
  doar atunci când este strict necesar. Devenind treptat un programator din ce în ce mai iscusit,
   pasionat și determinat, sarcina ta este să realizezi o implementare eficientă a
   clasei LazyNumberDetails, care integrează cele două mecanisme puternice de optimizare:
    Lazy evaluation și Caching.
Concret, clasa LazyNumberDetails va conține cel puțin următoarele câmpuri și metode:
LazyNumberDetails.java
public class LazyNumberDetails {
  private int number;

  public LazyNumberDetails(int number) {...}

  public void updateNumber(int number) {...}

  public boolean isPrime() {...}
  public boolean isPerfect() {...}
  public boolean isMagic() {...}
}
Metodele publice prezentate în schița anterioară sunt doar cele care vor fi apelate de utilizator.
 În cadrul implementării, va trebui să definești orice alte
  metode și câmpuri necesare pentru a respecta funcționalitatea cerută, detaliată în continuare.
Funcționalitate
Un obiect de tip LazyNumberDetails va conține întotdeauna un număr natural (i.e. câmpul number) despre
 care va răspunde, prin intermediul metodelor publice, la intrebările aferente
  (i.e. isPrime?, isPerfect?, isMagic?).
Numărul respectiv este primit (obligatoriu) la construirea obiectului,
 iar acesta poate fi schimbat (oricând) pe parcursul programului de către utilizatorul obiectului,
 folosind metoda updateNumber(int). Din momentul în care numărul intern a fost schimbat,
 toate metodele de interogare (i.e. isPrime?, isPerfect?, isMagic?) vor returna rezultate
 aferente noii valori. Cu alte cuvinte, metodele de interogare vor afișa mereu informații
 actualizate, despre ultimul / cel mai recent număr stocat.
Optimalitate
Deoarece toate cele 3 interogări (i.e. isPrime?, isPerfect?, isMagic?) sunt considerate
operații costisitoare, acestea trebuie executate de un număr minim de ori.
 Acest lucru va fi asigurat prin implementarea celor două modele de optimizare:
•	Modelul Lazy evaluation asigură faptul că oricare algoritm intens computațional
 este executat doar dacă / atunci când utilizatorul solicită rezultatul.
•	Mecanismul de Caching realizează stocarea rezultatului pentru oricare
algoritm intens computațional (i.e. după execuția acestuia).
 Astfel, rezultatul memorat este disponibil pe viitor,
 dacă utilizatorul efectuează din nou aceeași interogare,
  și poate fi returnat direct (i.e. fără a executa din nou algoritmul în cauză).
Exemplu de rulare
Să consideram un scenariu concret de rulare, pentru a înțelege mai bine funcționarea obiectelor clasei:
LazyNumberDetails lnd;
lnd = new LazyNumberDetails(23); // (1) **none (lazy eval.)** -> no user action

// User instruction        |    What happens?            |  Explanation
lnd.updateNumber(10); // (2)  **none (lazy eval.)**    -> no user action
lnd.updateNumber(17); // (3)  **none (lazy eval.)**    -> no user action
lnd.isPrime();        // (4)  !!intensiveComputation!! -> prime algorithm for 17
lnd.isPrime();        // (5)  **cached**               -> saved result from prime alg
lnd.updateNumber(28); // (6)  **none (lazy eval.)**    -> no user action
lnd.isPerfect();      // (7)  !!intensiveComputation!! -> perfect algorithm for 28
lnd.isPrime();        // (8)  !!intensiveComputation!! -> prime algorithm for 28
lnd.isPerfect();      // (9)  **cached**               -> saved result from perfect alg
lnd.isMagic();        // (10) !!intensiveComputation!! -> magic algorithm for 28
lnd.isPrime();        // (11) **cached**               -> saved result from prime alg
lnd.updateNumber(12); // (12) **none (lazy eval.)**    -> no user action
lnd.isMagic();        // (13) !!intensiveComputation!! -> magic algorithm for 12
lnd.isMagic();        // (14) **cached**               -> saved result from magic alg
...
Remarcăm că fiecare operație costisitoare (i.e. execuția algoritmului prime, perfect sau magic)
se va realiza practic doar într-un singur caz:
1.	Dacă utilizatorul realizează (explicit) o interogare de forma isX(),
iar acea interogare nu a mai fost efectuată până atunci, pentru numărul stocat.
o	Instrucțiunile corespunzătoare: (4), (7), (8), (10) respectiv (13).
În toate celelalte cazuri, nu se va executa nicio operație costisitoare
 (i.e. aferentă algoritmului prime, perfect sau magic):
1.	Dacă utilizatorul a mai realizat în trecut interogarea isX() pentru numărul stocat,
atunci rezultatul este deja știut. Prin urmare, acesta va fi returnat direct.
o	Hint: Cum poate fi deja știut? La execuția inițială a interogării isX(),
 atunci când a fost necesară execuția algoritmului X (intens computațional),
 se stochează (i.e. într-un alt câmp al obiectului) rezultatul calculat de algoritm.
 Ulterior, acel rezultat va fi returnat direct, fără a mai rula algoritmul.
	Acesta este mecanismul de Caching ;).
o	Instrucțiunile corespunzătoare: (5), (9), (11) și (14).
2.	Dacă utilizatorul nu realizează niciodată interogarea isX() pentru numărul curent (number),
atunci niciun algoritm intens computațional nu a fost executat (inutil).
o	Acesta este mecanismul de Lazy evaluation ;).
o	Instrucțiunile corespunzătoare: (1), (2), (3), (6) și (12).